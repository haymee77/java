Java
- 객체지향적 언어로 모든 기능들이 클래스라 부르는 객체안에 존재
- One Source Multi Using
- JVM(Java Virtual Machine - 자바 가상 머신) 위에서 작업을 함.. OS 상관없이 동작 가능
- 객체지향적 언어이기 때문에 유지보수가 용이함

자바의 장점
1. JVM을 사용하기 때문에 OS마다 컴파일 할 필요가 없다.
2. 

자바의 단점

객체지향 언어의 장점

객체지향 언어의 단점

작업순서
1. [class name].java 파일 생성
2. 명령 프롬프트에서 [class name].java 파일이 있는 폴더로 이동
3. 컴파일 - javac [class name].java / [class name].class 파일이 생성됨
4. 실행 - java [class name] / [class name].class 파일이 실행됨

...
- ASP, PHP는 인터프리터 언어로 개발속도가 빠름/실행속도가 느림
- JSP, .Net은 컴파일 언어로 개발속도가 느림/실행속도가 빠름

주석
- 프로그램 실행과는 전혀 관련이 없는 단순한 설명을 입력하기 위한 기능
- 한 줄 주석: // comment
- 여러 줄 주석: /* comment */

변수(Variable)
- 특정 값을 임시로 저장하기 위한 메모리 공간, 값의 변경이 자유로움

변수의 자료형(Data Type).. 기본 자료형
- boolean / 1byte / true|false 논리값
- char / 2byte / unicode single character / 작은 따옴표로 표시
- byte / 1byte / -128 ~ 127 정수 표현 
- short / 2byte / -32768 ~ 32767 정수 표현 
- int / 4byte / -21억 ~ 21억 정수 표현 - cpu가 사용하기 좋은 자료형..
- long / 8byte / -922경 ~ 922경 정수 표현
- long 이상의 자료형이 필요한 경우 문자 자료형을 사용한다고.. 당연히 속도 느림.
- float / 4byte / 1.4 * 10^-45 ~ 3.4 * 10^38 실수 표현
- double / 8byte / 4.94 * 10^-324 ~ 1.79 * 10^308 실수 표현 / 실수의 기본값

* 기본 자료형이 아닌 모든 자료형은 class임

변수선언
- 기본자료형 변수명; 
   ex) int i;
- 변수의 초기화: 변수에 값을 처음 넣는 것

변수 명명 규칙
- 낙타표기법, 소문자로 시작, 복합어일 경우 중간 단어 첫 글자 대문자.
   ex) studentCnt, noticeTitle, memberId...
- 길더라도 의미있는 영문 단어 사용
- 메소드와 변수의 명명규칙 동일...?? <- 보통 파스칼표기법 쓰지 않나..??

클래스 명명 규칙
- 파스칼 표기법, 대문자로 시작, 복합어 첫 글자 대문자.
   ex) CouponReminder, ...

상수 명명 규칙
- 모든 글자 대문자로 표기, 단어별 구분은 언더바(_)로 함
   ex) DB_CONNECT_ID, MAX_NUM, MIN_NUM, ...

 